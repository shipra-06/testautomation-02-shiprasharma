"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _https = _interopRequireDefault(require("https"));

var _logger = _interopRequireDefault(require("@percy/logger"));

var _bytes = _interopRequireDefault(require("./utils/bytes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Returns an item from the map keyed by the current platform
function selectByPlatform(map) {
  let {
    platform,
    arch
  } = process;
  return map[platform === 'win32' && arch === 'x64' ? 'win64' : platform];
} // Installs a revision of Chromium to a local directory


function installChromium({
  // default directory is within @percy/core package root
  directory = _path.default.resolve(__dirname, '../.local-chromium'),
  // default chromium revision by platform (see installChromium.revisions)
  revision = selectByPlatform(installChromium.revisions)
} = {}) {
  let extract = (i, o) => require('extract-zip')(i, {
    dir: o
  });

  let url = 'https://storage.googleapis.com/chromium-browser-snapshots/' + selectByPlatform({
    linux: `Linux_x64/${revision}/chrome-linux.zip`,
    darwin: `Mac/${revision}/chrome-mac.zip`,
    win64: `Win_x64/${revision}/chrome-win.zip`,
    win32: `Win/${revision}/chrome-win32.zip`
  });
  let executable = selectByPlatform({
    linux: _path.default.join('chrome-linux', 'chrome'),
    win64: _path.default.join('chrome-win', 'chrome.exe'),
    win32: _path.default.join('chrome-win32', 'chrome.exe'),
    darwin: _path.default.join('chrome-mac', 'Chromium.app', 'Contents', 'MacOS', 'Chromium')
  });
  return install({
    name: 'Chromium',
    revision,
    url,
    extract,
    directory,
    executable
  });
} // default chromium revisions corresponds to v87.0.4280.x


installChromium.revisions = {
  linux: '812847',
  win64: '812845',
  win32: '812822',
  darwin: '812851'
}; // Installs an executable from a url to a local directory, returning the full path to the extracted
// binary. Skips installation if the executable already exists at the binary path.

async function install({
  name,
  revision,
  url,
  extract,
  directory,
  executable
}) {
  let outdir = _path.default.join(directory, revision);

  let archive = _path.default.join(outdir, decodeURIComponent(url.split('/').pop()));

  let exec = _path.default.join(outdir, executable);

  if (!_fs.default.existsSync(exec)) {
    let log = (0, _logger.default)('core:install');
    log.info(`${name} not found, downloading...`);

    try {
      // ensure the out directory exists
      await _fs.default.promises.mkdir(outdir, {
        recursive: true
      }); // download the file at the given URL

      await new Promise((resolve, reject) => _https.default.get(url, response => {
        // on failure, resume the response before rejecting
        if (response.statusCode !== 200) {
          response.resume();
          reject(new Error(`Download failed: ${response.statusCode} - ${url}`));
          return;
        } // log progress


        if (log.shouldLog('info')) {
          let size = parseInt(response.headers['content-length'], 10);
          let msg = `${(0, _bytes.default)(size)} (${revision}) [:bar] :percent :etas`;
          let progress = new (require('progress'))(_logger.default.format(msg), {
            stream: _logger.default.stdout,
            incomplete: ' ',
            total: size,
            width: 20
          });
          response.on('data', chunk => {
            progress.tick(chunk.length);
          });
        } // pipe the response directly to a file


        response.pipe(_fs.default.createWriteStream(archive).on('finish', resolve).on('error', reject));
      }).on('error', reject)); // extract the downloaded file

      await extract(archive, outdir); // log success

      log.info(`Successfully downloaded ${name}`);
    } finally {
      // always cleanup the archive
      if (_fs.default.existsSync(archive)) {
        await _fs.default.promises.unlink(archive);
      }
    }
  } // return the path to the executable


  return exec;
} // commonjs friendly


module.exports = install;
module.exports.chromium = installChromium;
module.exports.selectByPlatform = selectByPlatform;