"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = percyAssert;

var _assert = require("assert");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Percy assertions errors contain extra meta data and have specific lookup keys
// for different computed assertion error messages.
class PercyAssertionError extends Error {
  constructor(lookup, meta = {}) {
    var _PercyAssertionError$, _PercyAssertionError$2, _PercyAssertionError$3;

    super((_PercyAssertionError$ = (_PercyAssertionError$2 = (_PercyAssertionError$3 = PercyAssertionError.dict)[lookup]) === null || _PercyAssertionError$2 === void 0 ? void 0 : _PercyAssertionError$2.call(_PercyAssertionError$3, meta)) !== null && _PercyAssertionError$ !== void 0 ? _PercyAssertionError$ : lookup);
    this.name = this.constructor.name;
    this.meta = meta;
  }

  toString() {
    return this.message;
  }

} // Wraps native assert to throw a Percy assertion error with optional meta.


_defineProperty(PercyAssertionError, "dict", {
  'disallowed status': ({
    status
  }) => `Disallowed response status [${status}]`,
  'is empty': () => 'Empty response',
  'is remote': () => 'Remote resource',
  'no response': () => 'No response',
  'too many bytes': ({
    size
  }) => `Max file size exceeded [${size}]`,
  'too many widths': ({
    widths
  }) => `Too many widths requested: maximum is 10, requested ${widths}`
});

function percyAssert(condition, lookup, meta) {
  (0, _assert.strict)(condition, new PercyAssertionError(lookup, meta));
}