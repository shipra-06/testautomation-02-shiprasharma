"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLocalResource = createLocalResource;
exports.createRootResource = createRootResource;
exports.createLogResource = createLogResource;

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _fs = require("fs");

var _utils = require("@percy/client/dist/utils");

var _assert = _interopRequireDefault(require("./assert"));

var _bytes = _interopRequireDefault(require("./bytes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MAX_FILE_SIZE_BYTES = 15728640; // 15mb

const TEMP_DIR = _path.default.join(_os.default.tmpdir(), 'percy'); // Creates a local resource object containing the resource URL, SHA, mimetype,
// and local filepath in the OS temp directory. If the file does not exist, it
// is created unless it exceeds the file size limit.


function createLocalResource(url, content, mimetype, beforeWrite, meta) {
  if (!(0, _fs.existsSync)(TEMP_DIR)) (0, _fs.mkdirSync)(TEMP_DIR);
  let sha = (0, _utils.sha256hash)(content);

  let filepath = _path.default.join(TEMP_DIR, sha);

  if (!(0, _fs.existsSync)(filepath)) {
    beforeWrite === null || beforeWrite === void 0 ? void 0 : beforeWrite();
    (0, _assert.default)(content.length < MAX_FILE_SIZE_BYTES, 'too many bytes', {
      size: (0, _bytes.default)(content.length),
      ...meta
    });
    (0, _fs.writeFileSync)(filepath, content);
  }

  return {
    url,
    sha,
    filepath,
    mimetype
  };
} // Creates a root resource object containing the URL, SHA, content, and mimetype
// with an additional `root: true` property.


function createRootResource(url, content) {
  return {
    url,
    content,
    sha: (0, _utils.sha256hash)(content),
    mimetype: 'text/html',
    root: true
  };
} // Creates a log resource object.


function createLogResource(logs) {
  let content = JSON.stringify(logs);
  return {
    content,
    url: `/percy.${Date.now()}.log`,
    sha: (0, _utils.sha256hash)(content),
    mimetype: 'text/plain'
  };
}